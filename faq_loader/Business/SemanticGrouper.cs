using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using UniversalFAQLoader.Business.Models;
using UniversalFAQLoader.Business.Algorithms;

namespace UniversalFAQLoader.Business.Algorithms
{
    /// <summary>
    /// –ê–ª–≥–æ—Ä–∏—Ç–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ FAQ –∑–∞–ø–∏—Å–µ–π
    /// –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º—ã—Å–ª–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    /// </summary>
    public class SemanticGrouper : IFAQAlgorithm
    {
        private AlgorithmConfiguration _configuration;
        
        /// <summary>
        /// –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        /// </summary>
        public string DisplayName => "üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞";
        
        /// <summary>
        /// –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        public string Description => "–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã FAQ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–º—ã—Å–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤";
        
        /// <summary>
        /// –í–µ—Ä—Å–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        /// </summary>
        public Version Version => new Version(1, 0, 0);
        
        /// <summary>
        /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public IEnumerable<Type> SupportedInputTypes => new[] { typeof(IEnumerable<FAQNode>) };

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ SemanticGrouper
        /// </summary>
        public SemanticGrouper()
        {
            _configuration = new AlgorithmConfiguration
            {
                IsEnabled = true,
                Parameters = new Dictionary<string, object>
                {
                    ["GroupSimilarityThreshold"] = 0.75,
                    ["MinGroupSize"] = 2,
                    ["MaxGroupSize"] = 15,
                    ["AutoGenerateParentQuery"] = true,
                    ["UseHierarchicalClustering"] = true
                }
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <returns>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</returns>
        public AlgorithmConfiguration GetConfiguration() => _configuration;
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <param name="configuration">–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</param>
        public void UpdateConfiguration(AlgorithmConfiguration configuration) => _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

        /// <summary>
        /// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        /// </summary>
        /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏</returns>
        public ValidationResult Validate(AlgorithmContext context)
        {
            var errors = new List<string>();
            var warnings = new List<string>();

            if (context?.InputNodes == null)
                errors.Add("–í—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");

            var nodesList = context?.InputNodes?.ToList();
            if (nodesList?.Count == 0)
                warnings.Add("–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –ø—É—Å—Ç - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");

            return new ValidationResult { IsValid = errors.Count == 0, ErrorMessages = errors, Warnings = warnings };
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞</returns>
        public Task<AlgorithmResult> ExecuteAsync(AlgorithmContext context)
        {
            var startTime = DateTime.UtcNow;
            var statistics = new AlgorithmStatistics();
            
            try
            {
                var validationResult = Validate(context);
                if (!validationResult.IsValid)
                {
                    return Task.FromResult(new AlgorithmResult
                    {
                        IsSuccessful = false,
                        ErrorMessages = validationResult.ErrorMessages,
                        Statistics = statistics
                    });
                }

                var nodes = (context.InputNodes ?? Enumerable.Empty<FAQNode>()).ToList();
                statistics.ProcessedNodesCount = nodes.Count;

                var progress = context.ProgressReporter;

                // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
                progress?.Report(new AlgorithmProgress { CurrentOperation = "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤...", PercentageComplete = 10 });
                var nodeVectors = CreateSemanticVectors(nodes, context.CancellationToken);

                // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
                var similarityMatrix = CalculateSimilarityMatrix(nodes, nodeVectors, context.CancellationToken);

                // 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —É–∑–ª–æ–≤
                var clusters = PerformClustering(nodes, similarityMatrix, context.CancellationToken);

                // 4. –°–æ–∑–¥–∞–Ω–∏–µ FAQ –≥—Ä—É–ø–ø –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                var groups = CreateFAQGroups(clusters, context.CancellationToken);

                // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                var connections = CreateGroupConnections(groups, context.CancellationToken);

                // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
                UpdateNodesWithGroupInfo(nodes, groups);

                // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
                var suggestions = GenerateGroupingSuggestions(groups, context.CancellationToken);

                var executionTime = DateTime.UtcNow - startTime;
                statistics.ExecutionTime = executionTime;
                statistics.ConnectionsFound = connections.Count;
                statistics.MemoryUsedBytes = GC.GetTotalMemory(false);
                statistics.CustomMetrics = new Dictionary<string, object>
                {
                    ["GroupsCreated"] = groups.Count,
                    ["AverageGroupSize"] = groups.Any() ? groups.Average(g => g.Nodes.Count) : 0,
                    ["NodesGrouped"] = groups.Sum(g => g.Nodes.Count)
                };

                progress?.Report(new AlgorithmProgress { CurrentOperation = "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", PercentageComplete = 100, ProcessedItems = nodes.Count });

                var overallConfidence = groups.Any() ? groups.Average(g => g.AverageSimilarity) : 0.0;

                return Task.FromResult(new AlgorithmResult
                {
                    IsSuccessful = true,
                    ProcessedNodes = nodes,
                    Connections = connections,
                    Suggestions = suggestions,
                    OverallConfidence = overallConfidence,
                    Statistics = statistics,
                    AdditionalData = new Dictionary<string, object> { ["FAQGroups"] = groups }
                });
            }
            catch (Exception ex)
            {
                statistics.ExecutionTime = DateTime.UtcNow - startTime;
                return Task.FromResult(new AlgorithmResult { IsSuccessful = false, ErrorMessages = new[] { ex.Message }, Statistics = statistics });
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–∑–ª–æ–≤
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ª–æ–≤–∞—Ä—å —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞</returns>
        private Dictionary<FAQNode, float[]> CreateSemanticVectors(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            // –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
            var nodeVectors = new Dictionary<FAQNode, float[]>();
            foreach (var node in nodes)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var combinedText = $"{node.Query} {string.Join(" ", node.Variations)} {node.Response}";
                var vector = CreateTextVector(combinedText);
                nodeVectors[node] = vector;
                node.AlgorithmProps.SemanticVector = vector;
            }

            return nodeVectors;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
        /// </summary>
        /// <param name="text">–¢–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</param>
        /// <returns>–í–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞</returns>
        private float[] CreateTextVector(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return new float[100];

            var normalizedText = text.ToLowerInvariant().Replace("—ë", "–µ");
            var words = Regex.Split(normalizedText, @"\W+").Where(w => w.Length > 2).ToList();
            var vector = new float[100];
            
            foreach (var word in words.Distinct())
            {
                var hash = Math.Abs(word.GetHashCode()) % 100;
                var frequency = (float)words.Count(w => w == word) / words.Count;
                vector[hash] += frequency;
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            var magnitude = (float)Math.Sqrt(vector.Sum(v => v * v));
            if (magnitude > 0)
            {
                for (int i = 0; i < vector.Length; i++)
                    vector[i] /= magnitude;
            }

            return vector;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="nodeVectors">–í–µ–∫—Ç–æ—Ä—ã —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞</returns>
        private Dictionary<(FAQNode, FAQNode), double> CalculateSimilarityMatrix(
            List<FAQNode> nodes, Dictionary<FAQNode, float[]> nodeVectors, System.Threading.CancellationToken cancellationToken)
        {
            var similarityMatrix = new Dictionary<(FAQNode, FAQNode), double>();

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = i + 1; j < nodes.Count; j++)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    var similarity = CalculateCosineSimilarity(nodeVectors[nodes[i]], nodeVectors[nodes[j]]);
                    similarityMatrix[(nodes[i], nodes[j])] = similarity;
                }
            }

            return similarityMatrix;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
        /// </summary>
        /// <param name="vector1">–ü–µ—Ä–≤—ã–π –≤–µ–∫—Ç–æ—Ä</param>
        /// <param name="vector2">–í—Ç–æ—Ä–æ–π –≤–µ–∫—Ç–æ—Ä</param>
        /// <returns>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ (0.0 - 1.0)</returns>
        private double CalculateCosineSimilarity(float[] vector1, float[] vector2)
        {
            if (vector1.Length != vector2.Length)
                return 0.0;

            var dotProduct = 0.0;
            var magnitude1 = 0.0;
            var magnitude2 = 0.0;

            for (int i = 0; i < vector1.Length; i++)
            {
                dotProduct += vector1[i] * vector2[i];
                magnitude1 += vector1[i] * vector1[i];
                magnitude2 += vector2[i] * vector2[i];
            }

            return magnitude1 == 0.0 || magnitude2 == 0.0 ? 0.0 : dotProduct / (Math.Sqrt(magnitude1) * Math.Sqrt(magnitude2));
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —É–∑–ª–æ–≤
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="similarityMatrix">–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</returns>
        private List<List<FAQNode>> PerformClustering(
            List<FAQNode> nodes, Dictionary<(FAQNode, FAQNode), double> similarityMatrix, System.Threading.CancellationToken cancellationToken)
        {
            var groupThreshold = (double)_configuration.Parameters["GroupSimilarityThreshold"];
            var clusters = new List<List<FAQNode>>();
            var processed = new HashSet<FAQNode>();

            foreach (var node in nodes)
            {
                cancellationToken.ThrowIfCancellationRequested();

                if (processed.Contains(node))
                    continue;

                var cluster = new List<FAQNode> { node };
                processed.Add(node);

                foreach (var otherNode in nodes)
                {
                    if (processed.Contains(otherNode))
                        continue;

                    var similarity = GetSimilarity(node, otherNode, similarityMatrix);
                    if (similarity >= groupThreshold)
                    {
                        cluster.Add(otherNode);
                        processed.Add(otherNode);
                    }
                }

                var minGroupSize = (int)_configuration.Parameters["MinGroupSize"];
                var maxGroupSize = (int)_configuration.Parameters["MaxGroupSize"];
                
                if (cluster.Count >= minGroupSize && cluster.Count <= maxGroupSize)
                    clusters.Add(cluster);
            }

            return clusters;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <param name="similarityMatrix">–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞</param>
        /// <returns>–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞</returns>
        private double GetSimilarity(FAQNode node1, FAQNode node2, Dictionary<(FAQNode, FAQNode), double> similarityMatrix)
        {
            return similarityMatrix.TryGetValue((node1, node2), out var similarity) ? similarity :
                   similarityMatrix.TryGetValue((node2, node1), out similarity) ? similarity : 0.0;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ FAQ –≥—Ä—É–ø–ø –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        /// </summary>
        /// <param name="clusters">–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ FAQ –≥—Ä—É–ø–ø</returns>
        private List<FAQGroup> CreateFAQGroups(List<List<FAQNode>> clusters, System.Threading.CancellationToken cancellationToken)
        {
            var groups = new List<FAQGroup>();
            var autoGenerateParent = (bool)_configuration.Parameters["AutoGenerateParentQuery"];

            foreach (var cluster in clusters)
            {
                cancellationToken.ThrowIfCancellationRequested();

                var group = new FAQGroup
                {
                    Nodes = cluster,
                    CreatedByAlgorithm = DisplayName,
                    AverageSimilarity = CalculateClusterAverageSimilarity(cluster),
                    CreatedAt = DateTime.UtcNow,
                    IsUserConfirmed = false,
                    Name = GenerateGroupName(cluster),
                    Description = $"–ì—Ä—É–ø–ø–∞ –∏–∑ {cluster.Count} —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
                };

                if (autoGenerateParent)
                    group.SuggestedParentQuery = GenerateParentQuery(cluster);

                groups.Add(group);
            }

            return groups;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
        /// </summary>
        /// <param name="cluster">–ö–ª–∞—Å—Ç–µ—Ä —É–∑–ª–æ–≤</param>
        /// <returns>–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞</returns>
        private double CalculateClusterAverageSimilarity(List<FAQNode> cluster)
        {
            if (cluster.Count < 2)
                return 1.0;

            var similarities = new List<double>();
            for (int i = 0; i < cluster.Count; i++)
            {
                for (int j = i + 1; j < cluster.Count; j++)
                {
                    var similarity = CalculateCosineSimilarity(
                        cluster[i].AlgorithmProps.SemanticVector,
                        cluster[j].AlgorithmProps.SemanticVector);
                    similarities.Add(similarity);
                }
            }

            return similarities.Any() ? similarities.Average() : 0.0;
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        /// </summary>
        /// <param name="cluster">–ö–ª–∞—Å—Ç–µ—Ä —É–∑–ª–æ–≤</param>
        /// <returns>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</returns>
        private string GenerateGroupName(List<FAQNode> cluster)
        {
            var allKeywords = new Dictionary<string, int>();

            foreach (var node in cluster)
            {
                var keywords = ExtractKeywords(node.Query + " " + string.Join(" ", node.Variations));
                foreach (var keyword in keywords)
                    allKeywords[keyword] = allKeywords.GetValueOrDefault(keyword, 0) + 1;
            }

            var topKeywords = allKeywords
                .Where(kvp => kvp.Value >= cluster.Count / 2)
                .OrderByDescending(kvp => kvp.Value)
                .Take(2)
                .Select(kvp => kvp.Key)
                .ToList();

            return topKeywords.Any() ? string.Join(" ", topKeywords).ToUpperInvariant() : "–ì–†–£–ü–ü–ê –í–û–ü–†–û–°–û–í";
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
        /// </summary>
        /// <param name="cluster">–ö–ª–∞—Å—Ç–µ—Ä —É–∑–ª–æ–≤</param>
        /// <returns>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å</returns>
        private string GenerateParentQuery(List<FAQNode> cluster)
        {
            var commonKeywords = FindCommonKeywords(cluster);
            return commonKeywords.Any() ? $"–í–æ–ø—Ä–æ—Å—ã –æ {string.Join(", ", commonKeywords.Take(2))}" : "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã";
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        /// </summary>
        /// <param name="groups">–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏</returns>
        private List<FAQConnection> CreateGroupConnections(List<FAQGroup> groups, System.Threading.CancellationToken cancellationToken)
        {
            var connections = new List<FAQConnection>();

            foreach (var group in groups)
            {
                for (int i = 0; i < group.Nodes.Count; i++)
                {
                    for (int j = i + 1; j < group.Nodes.Count; j++)
                    {
                        connections.Add(new FAQConnection
                        {
                            SourceNodeId = group.Nodes[i].Id,
                            TargetNodeId = group.Nodes[j].Id,
                            Type = ConnectionType.GroupMember,
                            Strength = group.AverageSimilarity,
                            AlgorithmConfidence = 0.8,
                            CreatedByAlgorithm = DisplayName,
                            Description = $"–ß–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã '{group.Name}'",
                            Metadata = new Dictionary<string, object> { ["GroupId"] = group.Id, ["GroupName"] = group.Name }
                        });
                    }
                }
            }

            return connections;
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="groups">–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø</param>
        private void UpdateNodesWithGroupInfo(List<FAQNode> nodes, List<FAQGroup> groups)
        {
            foreach (var group in groups)
            {
                foreach (var node in group.Nodes)
                {
                    node.Metadata.GroupName = group.Name;
                    node.AlgorithmProps.ClusterId = group.Id.ToString();
                    if (!node.Metadata.Tags.Contains(group.Name))
                        node.Metadata.Tags.Add(group.Name);
                }
            }
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
        /// </summary>
        /// <param name="groups">–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</returns>
        private List<OptimizationSuggestion> GenerateGroupingSuggestions(List<FAQGroup> groups, System.Threading.CancellationToken cancellationToken)
        {
            var suggestions = new List<OptimizationSuggestion>();
            var maxGroupSize = (int)_configuration.Parameters["MaxGroupSize"];

            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
            var largeGroups = groups.Where(g => g.Nodes.Count > maxGroupSize * 0.8).ToList();
            foreach (var largeGroup in largeGroups)
            {
                suggestions.Add(new OptimizationSuggestion
                {
                    Type = SuggestionType.Restructure,
                    Description = $"–ì—Ä—É–ø–ø–∞ '{largeGroup.Name}' —Å–æ–¥–µ—Ä–∂–∏—Ç {largeGroup.Nodes.Count} —É–∑–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.",
                    Priority = 2,
                    Confidence = 0.7,
                    AffectedNodes = largeGroup.Nodes,
                    SuggestedActions = new Dictionary<string, object>
                    {
                        ["Action"] = "SplitGroup",
                        ["GroupId"] = largeGroup.Id,
                        ["SuggestedSubgroups"] = 2
                    }
                });
            }

            return suggestions;
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        /// <param name="text">–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</returns>
        private List<string> ExtractKeywords(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return new List<string>();

            var stopWords = new HashSet<string> 
            { 
                "–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä–æ–µ", 
                "–≤", "–Ω–∞", "—Å", "–ø–æ", "–¥–ª—è", "–æ—Ç", "–¥–æ", "–∏–∑", "–∫", "–∏", "–∏–ª–∏", "–Ω–µ", 
                "–Ω–æ", "–∞", "—Ç–∞–∫", "—ç—Ç–æ", "–µ—Å—Ç—å", "–±—ã—Ç—å", "–±—ã–ª–∞", "–±—ã–ª", "–±—ã–ª–æ", "–±—É–¥–µ—Ç", "–±—É–¥—É—Ç" 
            };

            return Regex.Split(text.ToLowerInvariant(), @"\W+")
                       .Where(w => w.Length > 2 && !stopWords.Contains(w))
                       .Distinct()
                       .ToList();
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
        /// </summary>
        /// <param name="cluster">–ö–ª–∞—Å—Ç–µ—Ä —É–∑–ª–æ–≤</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</returns>
        private List<string> FindCommonKeywords(List<FAQNode> cluster)
        {
            var keywordCounts = new Dictionary<string, int>();
            
            foreach (var node in cluster)
            {
                var keywords = ExtractKeywords(node.Query + " " + string.Join(" ", node.Variations));
                foreach (var keyword in keywords)
                    keywordCounts[keyword] = keywordCounts.GetValueOrDefault(keyword, 0) + 1;
            }

            return keywordCounts
                .Where(kvp => kvp.Value >= cluster.Count / 2)
                .OrderByDescending(kvp => kvp.Value)
                .Select(kvp => kvp.Key)
                .ToList();
        }
    }
}