using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using UniversalFAQLoader.Business.Models;
using UniversalFAQLoader.Business.Algorithms;

namespace UniversalFAQLoader.Business.Algorithms
{
    /// <summary>
    /// –ê–ª–≥–æ—Ä–∏—Ç–º —É–º–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è FAQ –∑–∞–ø–∏—Å–µ–π
    /// –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏: –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    /// </summary>
    public class SmartLinker : IFAQAlgorithm
    {
        private AlgorithmConfiguration _configuration;
        
        /// <summary>
        /// –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        /// </summary>
        public string DisplayName => "üîó –£–º–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ";
        
        /// <summary>
        /// –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        public string Description => "–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É FAQ –∑–∞–ø–∏—Å—è–º–∏: –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è";
        
        /// <summary>
        /// –í–µ—Ä—Å–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        /// </summary>
        public Version Version => new Version(1, 0, 0);
        
        /// <summary>
        /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public IEnumerable<Type> SupportedInputTypes => new[] { typeof(IEnumerable<FAQNode>) };

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ SmartLinker
        /// </summary>
        public SmartLinker()
        {
            _configuration = new AlgorithmConfiguration
            {
                IsEnabled = true,
                Parameters = new Dictionary<string, object>
                {
                    ["PrerequisiteThreshold"] = 0.7,
                    ["FollowUpThreshold"] = 0.65,
                    ["RelatedThreshold"] = 0.6,
                    ["ContradictionThreshold"] = 0.5,
                    ["MaxLinksPerNode"] = 8,
                    ["UseDifficultyAnalysis"] = true
                }
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <returns>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</returns>
        public AlgorithmConfiguration GetConfiguration() => _configuration;
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <param name="configuration">–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</param>
        public void UpdateConfiguration(AlgorithmConfiguration configuration) => _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

        /// <summary>
        /// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        /// </summary>
        /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏</returns>
        public ValidationResult Validate(AlgorithmContext context)
        {
            var errors = new List<string>();
            var warnings = new List<string>();

            if (context?.InputNodes == null)
                errors.Add("–í—Ö–æ–¥–Ω—ã–µ —É–∑–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");

            var nodesList = context?.InputNodes?.ToList();
            if (nodesList?.Count <= 1)
                warnings.Add("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∑–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π");

            return new ValidationResult { IsValid = errors.Count == 0, ErrorMessages = errors, Warnings = warnings };
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        /// </summary>
        /// <param name="context">–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞</returns>
        public Task<AlgorithmResult> ExecuteAsync(AlgorithmContext context)
        {
            var startTime = DateTime.UtcNow;
            var statistics = new AlgorithmStatistics();
            
            try
            {
                var validationResult = Validate(context);
                if (!validationResult.IsValid)
                {
                    return Task.FromResult(new AlgorithmResult { IsSuccessful = false, ErrorMessages = validationResult.ErrorMessages, Statistics = statistics });
                }

                var nodes = (context.InputNodes ?? Enumerable.Empty<FAQNode>()).ToList();
                statistics.ProcessedNodesCount = nodes.Count;
                var progress = context.ProgressReporter;
                var allConnections = new List<FAQConnection>();

                // 1. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
                progress?.Report(new AlgorithmProgress { CurrentOperation = "–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...", PercentageComplete = 10 });
                AnalyzeNodeComplexity(nodes, context.CancellationToken);

                // 2. –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
                var prerequisiteConnections = FindPrerequisites(nodes, context.CancellationToken);

                // 3. –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π —Ç–µ–º
                var followUpConnections = FindFollowUps(nodes, context.CancellationToken);

                // 4. –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º
                var relatedConnections = FindRelatedTopics(nodes, context.CancellationToken);

                // 5. –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
                var contradictionConnections = FindContradictions(nodes, context.CancellationToken);

                // Collect all connections
                allConnections.AddRange(prerequisiteConnections);
                allConnections.AddRange(followUpConnections);
                allConnections.AddRange(relatedConnections);
                allConnections.AddRange(contradictionConnections);

                // 6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π
                progress?.Report(new AlgorithmProgress { CurrentOperation = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π...", PercentageComplete = 95 });
                var optimizedConnections = OptimizeConnections(allConnections);

                // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—é
                var suggestions = GenerateLinkingSuggestions(nodes, optimizedConnections, context.CancellationToken);

                var executionTime = DateTime.UtcNow - startTime;
                statistics.ExecutionTime = executionTime;
                statistics.ConnectionsFound = optimizedConnections.Count;
                statistics.MemoryUsedBytes = GC.GetTotalMemory(false);
                statistics.CustomMetrics = new Dictionary<string, object>
                {
                    ["PrerequisiteLinks"] = optimizedConnections.Count(c => c.Type == ConnectionType.Prerequisite),
                    ["FollowUpLinks"] = optimizedConnections.Count(c => c.Type == ConnectionType.FollowUp),
                    ["RelatedLinks"] = optimizedConnections.Count(c => c.Type == ConnectionType.Related),
                    ["ContradictionLinks"] = optimizedConnections.Count(c => c.Type == ConnectionType.Contradiction)
                };

                progress?.Report(new AlgorithmProgress { CurrentOperation = "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", PercentageComplete = 100, ProcessedItems = nodes.Count });

                var overallConfidence = optimizedConnections.Any() ? optimizedConnections.Average(c => c.AlgorithmConfidence) : 0.0;

                return Task.FromResult(new AlgorithmResult
                {
                    IsSuccessful = true,
                    ProcessedNodes = nodes,
                    Connections = optimizedConnections,
                    Suggestions = suggestions,
                    OverallConfidence = overallConfidence,
                    Statistics = statistics
                });
            }
            catch (Exception ex)
            {
                statistics.ExecutionTime = DateTime.UtcNow - startTime;
                return Task.FromResult(new AlgorithmResult { IsSuccessful = false, ErrorMessages = new[] { ex.Message }, Statistics = statistics });
            }
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        private void AnalyzeNodeComplexity(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            var useDifficultyAnalysis = (bool)_configuration.Parameters["UseDifficultyAnalysis"];
            if (!useDifficultyAnalysis) return;

            foreach (var node in nodes)
            {
                cancellationToken.ThrowIfCancellationRequested();

                var complexity = 0.0;
                var textLength = (node.Query?.Length ?? 0) + (node.Response?.Length ?? 0);
                complexity += Math.Min(textLength / 1000.0, 1.0) * 0.4;

                var techTermsCount = CountTechnicalTerms(node);
                complexity += Math.Min(techTermsCount / 10.0, 1.0) * 0.4;

                complexity += Math.Min((node.Variations?.Count ?? 0) / 5.0, 1.0) * 0.2;

                node.AlgorithmProps.ComplexityScore = Math.Min(complexity, 1.0);
            }
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</returns>
        private List<FAQConnection> FindPrerequisites(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            var connections = new List<FAQConnection>();
            var threshold = (double)_configuration.Parameters["PrerequisiteThreshold"];

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = 0; j < nodes.Count; j++)
                {
                    if (i == j) continue;
                    cancellationToken.ThrowIfCancellationRequested();

                    var currentNode = nodes[i];
                    var candidatePrerequisite = nodes[j];

                    if (candidatePrerequisite.AlgorithmProps.ComplexityScore >= currentNode.AlgorithmProps.ComplexityScore)
                        continue;

                    var strength = CalculatePrerequisiteStrength(currentNode, candidatePrerequisite);
                    
                    if (strength >= threshold)
                    {
                        connections.Add(new FAQConnection
                        {
                            SourceNodeId = candidatePrerequisite.Id,
                            TargetNodeId = currentNode.Id,
                            Type = ConnectionType.Prerequisite,
                            Strength = strength,
                            AlgorithmConfidence = strength,
                            CreatedByAlgorithm = DisplayName,
                            Description = $"–ü—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç: '{candidatePrerequisite.Query}' ‚Üí '{currentNode.Query}'"
                        });
                    }
                }
            }

            return connections;
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π —Ç–µ–º
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π</returns>
        private List<FAQConnection> FindFollowUps(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            var connections = new List<FAQConnection>();
            var threshold = (double)_configuration.Parameters["FollowUpThreshold"];

            foreach (var node in nodes)
            {
                cancellationToken.ThrowIfCancellationRequested();

                foreach (var candidateFollowUp in nodes)
                {
                    if (node.Id == candidateFollowUp.Id) continue;

                    var strength = CalculateFollowUpStrength(node, candidateFollowUp);
                    
                    if (strength >= threshold)
                    {
                        connections.Add(new FAQConnection
                        {
                            SourceNodeId = node.Id,
                            TargetNodeId = candidateFollowUp.Id,
                            Type = ConnectionType.FollowUp,
                            Strength = strength,
                            AlgorithmConfidence = strength,
                            CreatedByAlgorithm = DisplayName,
                            Description = $"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: '{node.Query}' ‚Üí '{candidateFollowUp.Query}'"
                        });
                    }
                }
            }

            return connections;
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º</returns>
        private List<FAQConnection> FindRelatedTopics(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            var connections = new List<FAQConnection>();
            var threshold = (double)_configuration.Parameters["RelatedThreshold"];

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = i + 1; j < nodes.Count; j++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var strength = CalculateRelatedStrength(nodes[i], nodes[j]);
                    
                    if (strength >= threshold)
                    {
                        connections.Add(new FAQConnection
                        {
                            SourceNodeId = nodes[i].Id,
                            TargetNodeId = nodes[j].Id,
                            Type = ConnectionType.Related,
                            Strength = strength,
                            AlgorithmConfidence = strength,
                            CreatedByAlgorithm = DisplayName,
                            Description = $"–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: '{nodes[i].Query}' ‚Üî '{nodes[j].Query}'"
                        });
                    }
                }
            }

            return connections;
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π</returns>
        private List<FAQConnection> FindContradictions(List<FAQNode> nodes, System.Threading.CancellationToken cancellationToken)
        {
            var connections = new List<FAQConnection>();
            var threshold = (double)_configuration.Parameters["ContradictionThreshold"];

            for (int i = 0; i < nodes.Count; i++)
            {
                for (int j = i + 1; j < nodes.Count; j++)
                {
                    cancellationToken.ThrowIfCancellationRequested();

                    var strength = CalculateContradictionStrength(nodes[i], nodes[j]);
                    
                    if (strength >= threshold)
                    {
                        connections.Add(new FAQConnection
                        {
                            SourceNodeId = nodes[i].Id,
                            TargetNodeId = nodes[j].Id,
                            Type = ConnectionType.Contradiction,
                            Strength = strength,
                            AlgorithmConfidence = strength,
                            CreatedByAlgorithm = DisplayName,
                            Description = $"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: '{nodes[i].Query}' ‚ö° '{nodes[j].Query}'"
                        });
                    }
                }
            }

            return connections;
        }

        /// <summary>
        /// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π
        /// </summary>
        /// <param name="connections">–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</param>
        /// <returns>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π</returns>
        private List<FAQConnection> OptimizeConnections(List<FAQConnection> connections)
        {
            var maxLinksPerNode = (int)_configuration.Parameters["MaxLinksPerNode"];

            return connections
                .GroupBy(c => c.SourceNodeId)
                .SelectMany(g => g.OrderByDescending(c => c.Strength).Take(maxLinksPerNode))
                .ToList();
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—é
        /// </summary>
        /// <param name="nodes">–°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤</param>
        /// <param name="connections">–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π</param>
        /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</returns>
        private List<OptimizationSuggestion> GenerateLinkingSuggestions(
            List<FAQNode> nodes, List<FAQConnection> connections, System.Threading.CancellationToken cancellationToken)
        {
            var suggestions = new List<OptimizationSuggestion>();

            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
            var isolatedNodes = nodes.Where(n => !connections.Any(c => c.SourceNodeId == n.Id || c.TargetNodeId == n.Id)).ToList();
            
            foreach (var isolatedNode in isolatedNodes)
            {
                suggestions.Add(new OptimizationSuggestion
                {
                    Type = SuggestionType.CreateConnection,
                    Description = $"–£–∑–µ–ª '{isolatedNode.Query}' –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã.",
                    Priority = 3,
                    Confidence = 0.8,
                    AffectedNodes = new[] { isolatedNode }
                });
            }

            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è–º
            var contradictions = connections.Where(c => c.Type == ConnectionType.Contradiction).ToList();
            foreach (var contradiction in contradictions)
            {
                var sourceNode = nodes.FirstOrDefault(n => n.Id == contradiction.SourceNodeId);
                var targetNode = nodes.FirstOrDefault(n => n.Id == contradiction.TargetNodeId);
                
                if (sourceNode != null && targetNode != null)
                {
                    suggestions.Add(new OptimizationSuggestion
                    {
                        Type = SuggestionType.ImproveResponse,
                        Description = $"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É '{sourceNode.Query}' –∏ '{targetNode.Query}'. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
                        Priority = 4,
                        Confidence = contradiction.AlgorithmConfidence,
                        AffectedNodes = new[] { sourceNode, targetNode }
                    });
                }
            }

            return suggestions;
        }

        #region Helper Methods

        /// <summary>
        /// –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —É–∑–ª–µ
        /// </summary>
        /// <param name="node">–£–∑–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</param>
        /// <returns>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤</returns>
        private int CountTechnicalTerms(FAQNode node)
        {
            var technicalTerms = new HashSet<string>
            {
                "API", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "—Å–µ—Ä–≤–µ—Ä", "–∫–ª–∏–µ–Ω—Ç", "–ø—Ä–æ—Ç–æ–∫–æ–ª", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
                "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–ø–∞—Ä–∞–º–µ—Ç—Ä", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü–∏—è", "–º–µ—Ç–æ–¥", "–∫–ª–∞—Å—Å"
            };

            var text = $"{node.Query} {node.Response}".ToLowerInvariant();
            return technicalTerms.Count(term => text.Contains(term));
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–≤—è–∑–∏ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        /// </summary>
        /// <param name="currentNode">–¢–µ–∫—É—â–∏–π —É–∑–µ–ª</param>
        /// <param name="candidatePrerequisite">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç</param>
        /// <returns>–°–∏–ª–∞ —Å–≤—è–∑–∏ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞</returns>
        private double CalculatePrerequisiteStrength(FAQNode currentNode, FAQNode candidatePrerequisite)
        {
            var strength = 0.0;

            var complexityDiff = currentNode.AlgorithmProps.ComplexityScore - candidatePrerequisite.AlgorithmProps.ComplexityScore;
            strength += Math.Min(complexityDiff * 2, 0.4);

            var semanticSimilarity = CalculateSemanticSimilarity(currentNode, candidatePrerequisite);
            strength += Math.Min(semanticSimilarity, 0.3);

            var prerequisiteKeywords = new[] { "—Å–Ω–∞—á–∞–ª–∞", "–ø–µ—Ä–µ–¥", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ" };
            var hasPrerequisiteKeywords = prerequisiteKeywords.Any(kw => 
                currentNode.Query?.ToLowerInvariant().Contains(kw) == true ||
                currentNode.Response?.ToLowerInvariant().Contains(kw) == true);
            
            if (hasPrerequisiteKeywords) strength += 0.3;

            return Math.Min(strength, 1.0);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–≤—è–∑–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        /// </summary>
        /// <param name="baseNode">–ë–∞–∑–æ–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="candidateFollowUp">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</param>
        /// <returns>–°–∏–ª–∞ —Å–≤—è–∑–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</returns>
        private double CalculateFollowUpStrength(FAQNode baseNode, FAQNode candidateFollowUp)
        {
            var strength = 0.0;

            var semanticSimilarity = CalculateSemanticSimilarity(baseNode, candidateFollowUp);
            strength += semanticSimilarity * 0.4;

            var followUpKeywords = new[] { "–¥–∞–ª–µ–µ", "–∑–∞—Ç–µ–º", "–ø–æ—Ç–æ–º", "—Ç–∞–∫–∂–µ", "–∫—Ä–æ–º–µ —Ç–æ–≥–æ", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" };
            var hasFollowUpKeywords = followUpKeywords.Any(kw => 
                candidateFollowUp.Query?.ToLowerInvariant().Contains(kw) == true ||
                candidateFollowUp.Response?.ToLowerInvariant().Contains(kw) == true);
            
            if (hasFollowUpKeywords) strength += 0.3;

            var complexityIncrease = candidateFollowUp.AlgorithmProps.ComplexityScore - baseNode.AlgorithmProps.ComplexityScore;
            if (complexityIncrease > 0) strength += Math.Min(complexityIncrease, 0.3);

            return Math.Min(strength, 1.0);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–≤—è–∑–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <returns>–°–∏–ª–∞ —Å–≤—è–∑–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º</returns>
        private double CalculateRelatedStrength(FAQNode node1, FAQNode node2)
        {
            var strength = 0.0;

            var semanticSimilarity = CalculateSemanticSimilarity(node1, node2);
            strength += semanticSimilarity * 0.5;

            var commonKeywords = FindCommonKeywords(node1, node2);
            strength += Math.Min(commonKeywords.Count / 5.0, 0.3);

            var commonResources = FindCommonResources(node1, node2);
            if (commonResources > 0) strength += 0.2;

            return Math.Min(strength, 1.0);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–≤—è–∑–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <returns>–°–∏–ª–∞ —Å–≤—è–∑–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π</returns>
        private double CalculateContradictionStrength(FAQNode node1, FAQNode node2)
        {
            var strength = 0.0;

            var contradictionKeywords = new[] 
            { 
                ("–¥–∞", "–Ω–µ—Ç"), ("–º–æ–∂–Ω–æ", "–Ω–µ–ª—å–∑—è"), ("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è", "–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"),
                ("–≤–∫–ª—é—á–∏—Ç—å", "–æ—Ç–∫–ª—é—á–∏—Ç—å"), ("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
            };

            var text1 = $"{node1.Query} {node1.Response}".ToLowerInvariant();
            var text2 = $"{node2.Query} {node2.Response}".ToLowerInvariant();

            foreach (var (positive, negative) in contradictionKeywords)
            {
                if ((text1.Contains(positive) && text2.Contains(negative)) ||
                    (text1.Contains(negative) && text2.Contains(positive)))
                {
                    strength += 0.3;
                }
            }

            var questionSimilarity = CalculateTextSimilarity(node1.Query, node2.Query);
            var responseSimilarity = CalculateTextSimilarity(node1.Response, node2.Response);
            
            if (questionSimilarity > 0.7 && responseSimilarity < 0.3)
            {
                strength += 0.4;
            }

            return Math.Min(strength, 1.0);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <returns>–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏</returns>
        private double CalculateSemanticSimilarity(FAQNode node1, FAQNode node2)
        {
            if (node1.AlgorithmProps.SemanticVector == null || node2.AlgorithmProps.SemanticVector == null)
                return 0.0;

            return CalculateCosineSimilarity(node1.AlgorithmProps.SemanticVector, node2.AlgorithmProps.SemanticVector);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
        /// </summary>
        /// <param name="vector1">–ü–µ—Ä–≤—ã–π –≤–µ–∫—Ç–æ—Ä</param>
        /// <param name="vector2">–í—Ç–æ—Ä–æ–π –≤–µ–∫—Ç–æ—Ä</param>
        /// <returns>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞</returns>
        private double CalculateCosineSimilarity(float[] vector1, float[] vector2)
        {
            if (vector1.Length != vector2.Length) return 0.0;

            var dotProduct = 0.0;
            var magnitude1 = 0.0;
            var magnitude2 = 0.0;

            for (int i = 0; i < vector1.Length; i++)
            {
                dotProduct += vector1[i] * vector2[i];
                magnitude1 += vector1[i] * vector1[i];
                magnitude2 += vector2[i] * vector2[i];
            }

            return magnitude1 == 0.0 || magnitude2 == 0.0 ? 0.0 : dotProduct / (Math.Sqrt(magnitude1) * Math.Sqrt(magnitude2));
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤
        /// </summary>
        /// <param name="text1">–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç</param>
        /// <param name="text2">–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç</param>
        /// <returns>–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤</returns>
        private double CalculateTextSimilarity(string text1, string text2)
        {
            if (string.IsNullOrWhiteSpace(text1) || string.IsNullOrWhiteSpace(text2))
                return 0.0;

            var words1 = new HashSet<string>(Regex.Split(text1.ToLowerInvariant(), @"\W+").Where(w => w.Length > 2));
            var words2 = new HashSet<string>(Regex.Split(text2.ToLowerInvariant(), @"\W+").Where(w => w.Length > 2));

            var intersection = words1.Intersect(words2).Count();
            var union = words1.Union(words2).Count();

            return union == 0 ? 0.0 : (double)intersection / union;
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</returns>
        private List<string> FindCommonKeywords(FAQNode node1, FAQNode node2)
        {
            var keywords1 = ExtractKeywords($"{node1.Query} {string.Join(" ", node1.Variations)}");
            var keywords2 = ExtractKeywords($"{node2.Query} {string.Join(" ", node2.Variations)}");
            
            return keywords1.Intersect(keywords2).ToList();
        }

        /// <summary>
        /// –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        /// </summary>
        /// <param name="node1">–ü–µ—Ä–≤—ã–π —É–∑–µ–ª</param>
        /// <param name="node2">–í—Ç–æ—Ä–æ–π —É–∑–µ–ª</param>
        /// <returns>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</returns>
        private int FindCommonResources(FAQNode node1, FAQNode node2)
        {
            var files1 = node1.Resources?.SelectMany(r => r.Files ?? new List<string>()).ToHashSet() ?? new HashSet<string>();
            var files2 = node2.Resources?.SelectMany(r => r.Files ?? new List<string>()).ToHashSet() ?? new HashSet<string>();
            
            return files1.Intersect(files2).Count();
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        /// </summary>
        /// <param name="text">–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</returns>
        private List<string> ExtractKeywords(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return new List<string>();

            var stopWords = new HashSet<string> 
            { 
                "–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä–æ–µ", 
                "–≤", "–Ω–∞", "—Å", "–ø–æ", "–¥–ª—è", "–æ—Ç", "–¥–æ", "–∏–∑", "–∫", "–∏", "–∏–ª–∏", "–Ω–µ", 
                "–Ω–æ", "–∞", "—Ç–∞–∫", "—ç—Ç–æ", "–µ—Å—Ç—å", "–±—ã—Ç—å", "–±—ã–ª–∞", "–±—ã–ª", "–±—ã–ª–æ", "–±—É–¥–µ—Ç", "–±—É–¥—É—Ç" 
            };

            return Regex.Split(text.ToLowerInvariant(), @"\W+")
                       .Where(w => w.Length > 2 && !stopWords.Contains(w))
                       .Distinct()
                       .ToList();
        }

        #endregion
    }
}