import logging
import os
import asyncio
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramRetryAfter, TelegramNetworkError, TelegramBadRequest

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
waiting_for_password = set()

def check_authentication(message: Message, db, config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if not message.from_user:
        return False
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–∞–¥–º–∏–Ω –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    if user_id == config.ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return db.is_user_authenticated(user_id)

def check_authentication_for_callback(callback: CallbackQuery, db, config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è callback query"""
    if not callback.from_user:
        return False
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id == config.ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return db.is_user_authenticated(user_id)

async def retry_file_operation(operation, max_retries=3, delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏"""
    for attempt in range(max_retries):
        try:
            return await operation()
        except (TelegramNetworkError, ConnectionError, OSError) as e:
            if attempt == max_retries - 1:
                raise e
            wait_time = delay * (attempt + 1)
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫.")
            await asyncio.sleep(wait_time)
        except TelegramRetryAfter as e:
            logging.warning(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫.")
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            raise e
    return None

async def auto_send_single_resource(message: Message, resource):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        if resource.get('type') == 'file':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            files = resource.get('files', [])
            if not files:
                return False
            
            sent_files = []
            for file_path in files:
                if not file_path or not os.path.exists(file_path):
                    logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(file_path)
                    if file_size > 50 * 1024 * 1024:  # 50MB
                        logging.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_path}")
                        continue
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                try:
                    async def send_file():
                        return await message.answer_document(types.FSInputFile(file_path))
                    
                    await retry_file_operation(send_file)
                    sent_files.append(os.path.basename(file_path))
                    logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'additional_text' in resource:
                try:
                    await message.answer(resource['additional_text'])
                except Exception as text_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞: {text_error}")
            
            return len(sent_files) > 0
                    
        elif resource.get('type') == 'link':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            link = resource.get('link')
            if not link:
                return False
                
            try:
                await message.answer(link)
                logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {link}")
                return True
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏: {send_error}")
                return False
        
        return False
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ auto_send_single_resource: {str(e)}")
        return False

def should_auto_send_resource(resources):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Å—É—Ä—Å"""
    if not resources or len(resources) != 1:
        return False, None
    
    resource = resources[0]
    
    # –î–ª—è —Å—Å—ã–ª–æ–∫ –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞
    if resource.get('type') == 'link':
        return True, resource
    
    # –î–ª—è —Ñ–∞–π–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
    if resource.get('type') == 'file':
        files = resource.get('files', [])
        if len(files) == 1:
            return True, resource
    
    return False, None

def create_resource_selection_keyboard(match, index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
    if 'resources' in match:
        for i, resource in enumerate(match['resources']):
            title = resource.get('title', '–†–µ—Å—É—Ä—Å')
            callback_data = f"resource_{index}_{i}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
            if resource.get('type') == 'file':
                icon = "üìÑ"
            elif resource.get('type') == 'link':
                icon = "üîó"
            else:
                icon = "üìé"
            
            keyboard.append([InlineKeyboardButton(
                text=f"{icon} {title}",
                callback_data=callback_data
            )])
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data.startswith("file_"))
async def file_selection_callback(callback: CallbackQuery, faq_loader):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü–∞—Ä—Å–∏–º callback_data: file_{index}_{file_key}_{file_index}
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        index = int(parts[1])
        file_key = parts[2]
        file_index = int(parts[3])
        
        if not faq_loader.faq or index >= len(faq_loader.faq):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return
            
        match = faq_loader.faq[index]
        
        if file_key not in match:
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        files = match[file_key] if isinstance(match[file_key], list) else [match[file_key]]
        
        if file_index >= len(files):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞")
            return
            
        file_path = files[file_index]
        
        if not file_path or not os.path.exists(file_path):
            logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB –¥–ª—è Telegram)
        try:
            file_size = os.path.getsize(file_path)
            if file_size > 50 * 1024 * 1024:  # 50MB
                await callback.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                return
        except OSError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            if not callback.message:
                await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return
                
            async def send_file():
                if callback.message:
                    return await callback.message.answer_document(types.FSInputFile(file_path))
                return None
            
            await retry_file_operation(send_file)
            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
        except Exception as send_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
            try:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass  # –ï—Å–ª–∏ –¥–∞–∂–µ callback.answer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("link_"))
async def link_selection_callback(callback: CallbackQuery, faq_loader):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü–∞—Ä—Å–∏–º callback_data: link_{index}
        parts = callback.data.split("_")
        if len(parts) < 2:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        index = int(parts[1])
        
        if not faq_loader.faq or index >= len(faq_loader.faq):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return
            
        match = faq_loader.faq[index]
        
        if 'link' not in match:
            await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await callback.message.answer(match['link'])
            await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as send_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏: {send_error}")
            try:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏")
            except:
                pass  # –ï—Å–ª–∏ –¥–∞–∂–µ callback.answer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("tv_year_"))
async def tv_year_selection_callback(callback: CallbackQuery, db, config, faq_loader):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü–∞—Ä—Å–∏–º –≥–æ–¥ –∏–∑ callback_data
        year = callback.data.split("_")[-1]
        
        if year not in ["2024", "2025"]:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ FAQ
        if not faq_loader.faq:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ –≥–æ–¥—É
        target_query = f"–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¢–í {year}"
        target_index = None
        
        for i, item in enumerate(faq_loader.faq):
            if item.get("query") == target_query:
                target_index = i
                break
        
        if target_index is None:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        match = faq_loader.faq[target_index]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback.message.answer(match['response'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if 'resources' in match and match['resources']:
            resource = match['resources'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å
            if resource.get('type') == 'file':
                files = resource.get('files', [])
                if files:
                    file_path = files[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
                    
                    if os.path.exists(file_path):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        try:
                            file_size = os.path.getsize(file_path)
                            if file_size > 50 * 1024 * 1024:  # 50MB
                                await callback.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                                return
                        except OSError as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
                            return
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        try:
                            async def send_file():
                                if callback.message:
                                    return await callback.message.answer_document(types.FSInputFile(file_path))
                                return None
                            
                            await retry_file_operation(send_file)
                            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                        except Exception as send_error:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
                            return
                    else:
                        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¢–í: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("soundbar_year_"))
async def soundbar_year_selection_callback(callback: CallbackQuery, db, config, faq_loader):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü–∞—Ä—Å–∏–º –≥–æ–¥ –∏–∑ callback_data
        year = callback.data.split("_")[-1]
        
        if year not in ["2024", "2025"]:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ FAQ
        if not faq_loader.faq:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ –≥–æ–¥—É
        target_query = f"–°–≤–æ–¥–Ω–∞—è —Å–∞—É–Ω–¥–±–∞—Ä {year}"
        target_index = None
        
        for i, item in enumerate(faq_loader.faq):
            if item.get("query") == target_query:
                target_index = i
                break
        
        if target_index is None:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        match = faq_loader.faq[target_index]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback.message.answer(match['response'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if 'resources' in match and match['resources']:
            resource = match['resources'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å
            if resource.get('type') == 'file':
                files = resource.get('files', [])
                if files:
                    file_path = files[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
                    
                    if os.path.exists(file_path):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        try:
                            file_size = os.path.getsize(file_path)
                            if file_size > 50 * 1024 * 1024:  # 50MB
                                await callback.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                                return
                        except OSError as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
                            return
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        try:
                            async def send_file():
                                if callback.message:
                                    return await callback.message.answer_document(types.FSInputFile(file_path))
                                return None
                            
                            await retry_file_operation(send_file)
                            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                        except Exception as send_error:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
                            return
                    else:
                        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ —Å–∞—É–Ω–¥–±–∞—Ä–æ–≤: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("resource_"))
async def resource_selection_callback(callback: CallbackQuery, faq_loader, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback.data
        if not callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü–∞—Ä—Å–∏–º callback_data: resource_{index}_{resource_index}
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        index = int(parts[1])
        resource_index = int(parts[2])
        
        if not faq_loader.faq or index >= len(faq_loader.faq):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return
            
        match = faq_loader.faq[index]
        
        if 'resources' not in match or resource_index >= len(match['resources']):
            await callback.answer("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        resource = match['resources'][resource_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
        if resource.get('type') == 'file':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            files = resource.get('files', [])
            if not files:
                await callback.answer("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            sent_files = []
            for file_path in files:
                if not file_path or not os.path.exists(file_path):
                    logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(file_path)
                    if file_size > 50 * 1024 * 1024:  # 50MB
                        logging.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_path}")
                        continue
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                try:
                    async def send_file():
                        if callback.message:
                            return await callback.message.answer_document(types.FSInputFile(file_path))
                        return None
                    
                    await retry_file_operation(send_file)
                    sent_files.append(os.path.basename(file_path))
                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'additional_text' in resource:
                try:
                    await callback.message.answer(resource['additional_text'])
                except Exception as text_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
            
            if sent_files:
                try:
                    await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(sent_files)}")
                except:
                    pass
            else:
                try:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
                except:
                    pass
                    
        elif resource.get('type') == 'link':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            link = resource.get('link')
            if not link:
                await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            try:
                await callback.message.answer(link)
                await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏: {send_error}")
                try:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏")
                except:
                    pass
                return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞: {str(e)}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass

@router.callback_query(F.data == "cancel")
async def cancel_selection_callback(callback: CallbackQuery, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    try:
        if callback.message and hasattr(callback.message, 'edit_text') and not isinstance(callback.message, types.InaccessibleMessage):
            await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await callback.answer("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            return
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.answer("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
        return
        
    await callback.answer()

@router.callback_query(F.data == "vsk_pamytka")
async def vsk_pamytka_callback(callback: CallbackQuery, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–º—è—Ç–∫–∏ –í–°–ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–∞–º—è—Ç–∫–∏
        file_path = "files/–ü–∞–º—è—Ç–∫–∞_–ø–æ_–ø—Ä–æ–≥—Ä–∞–º–º–∞–º_—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è_–≤_–í–°–ö_—Å–µ–Ω_24.pdf"
        
        if os.path.exists(file_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                file_size = os.path.getsize(file_path)
                if file_size > 50 * 1024 * 1024:  # 50MB
                    await callback.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                    return
            except OSError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            try:
                async def send_file():
                    if callback.message:
                        return await callback.message.answer_document(types.FSInputFile(file_path))
                    return None
                
                await retry_file_operation(send_file)
                await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {send_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")
                return
        else:
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–∞–º—è—Ç–∫–∏ –í–°–ö: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "vsk_zayavlenie")
async def vsk_zayavlenie_callback(callback: CallbackQuery, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –í–°–ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞—è–≤–ª–µ–Ω–∏—è
        files_to_send = [
            "files/–ó–∞—è–≤–ª–µ–Ω–∏–µ –í–°–ö.docx",
            "files/–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –°–°_–í–°–ö.xlsx"
        ]
        
        sent_files = []
        for file_path in files_to_send:
            if os.path.exists(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(file_path)
                    if file_size > 50 * 1024 * 1024:  # 50MB
                        logging.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_path}")
                        continue
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                try:
                    async def send_file():
                        if callback.message:
                            return await callback.message.answer_document(types.FSInputFile(file_path))
                        return None
                    
                    await retry_file_operation(send_file)
                    sent_files.append(os.path.basename(file_path))
                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {send_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º
                    continue
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        additional_text = (
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –≤ 1–°:\n"
            "- –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º —Å–ª—É—á–∞–µ (–®–∞–±–ª–æ–Ω—ã + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ)\n"
            "- –ö–æ–ø–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ (–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–≤–æ—Ä–æ—Ç + –ø—Ä–æ–ø–∏—Å–∫–∞)\n"
            "- –ö–æ–ø–∏—è/–æ—Ä–∏–≥–∏–Ω–∞–ª –ß–µ–∫–∞\n"
            "- –î–æ–≥–æ–≤–æ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è"
        )
        
        try:
            await callback.message.answer(additional_text)
        except Exception as text_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
        
        if sent_files:
            await callback.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(sent_files)}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            if callback.message and hasattr(callback.message, 'edit_reply_markup') and not isinstance(callback.message, types.InaccessibleMessage):
                await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –í–°–ö: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "summary_tv")
async def summary_tv_callback(callback: CallbackQuery, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞ –¥–ª—è –¢–í
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∫ –¢–í 2024", callback_data="tv_year_2024")],
            [InlineKeyboardButton(text="üì∫ –¢–í 2025", callback_data="tv_year_2025")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(callback.message, 'edit_text') and not isinstance(callback.message, types.InaccessibleMessage):
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í:", reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í:", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "summary_soundbar")
async def summary_soundbar_callback(callback: CallbackQuery, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not callback.from_user or not check_authentication_for_callback(callback, db, config):
        await callback.answer(
            "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            show_alert=True
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback.message
        if not callback.message:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞ –¥–ª—è —Å–∞—É–Ω–¥–±–∞—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéµ –°–∞—É–Ω–¥–±–∞—Ä 2024", callback_data="soundbar_year_2024")],
            [InlineKeyboardButton(text="üéµ –°–∞—É–Ω–¥–±–∞—Ä 2025", callback_data="soundbar_year_2025")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(callback.message, 'edit_text') and not isinstance(callback.message, types.InaccessibleMessage):
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–æ–≤:", reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–æ–≤:", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(CommandStart())
async def start_handler(message: Message, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    if not message.from_user:
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if check_authentication(message, db, config):
        await message.answer(
            "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø FAQ-–±–æ—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
            "üìù –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        waiting_for_password.add(user_id)
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:"
        )

@router.message(Command("help"))
async def help_handler(message: Message, db, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
        
    help_text = (
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
        "üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user and message.from_user.id == config.ADMIN_ID:
        help_text += (
            "\nüîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
            "/export_stats - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "/auth_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π\n"
        )
    
    help_text += "\nüîí –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º."
    await message.answer(help_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –í–´–®–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(Command("stats"))
async def stats_handler(
    message: Message, 
    db,
    config
):
    if not message.from_user or message.from_user.id != config.ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        stats = db.get_stats()
        response = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats.total_queries}</b>\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{stats.success_rate:.2f}%</b>\n"
            f"‚Ä¢ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{stats.unanswered_questions}</b>\n"
            f"‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–æ–≤: <b>{stats.bad_words_count}</b>\n"
            f"üîí –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats.authenticated_users_count}</b>\n\n"
            "üîù <b>–¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        )
        
        for i, (query, count) in enumerate(stats.popular_queries[:5], 1):
            response += f"{i}. {query} - <b>{count}</b> –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            
        await message.answer(response, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(Command("export_stats"))
async def export_stats_handler(
    message: Message, 
    db,
    config
):
    if not message.from_user or message.from_user.id != config.ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    try:
        filename = db.export_stats_to_file()
        
        async def send_stats_file():
            return await message.answer_document(
                types.FSInputFile(filename),
                caption="üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
            )
        
        await retry_file_operation(send_stats_file)
        os.remove(filename)
        logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(Command("auth_users"))
async def auth_users_handler(
    message: Message, 
    db,
    config
):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not message.from_user or message.from_user.id != config.ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        auth_count = db.get_authenticated_users_count()
        await message.answer(
            f"üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{auth_count}</b>\n\n"
            f"üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export_stats",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–°–≤–æ–¥–Ω–∞—è –¢–í"
@router.message(F.text.func(lambda text: text and "—Å–≤–æ–¥–Ω–∞—è" in text.lower() and "—Ç–≤" in text.lower()))
async def tv_summary_handler(
    message: Message, 
    db,
    config
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–°–≤–æ–¥–Ω–∞—è –¢–í" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    if not message.text or not (text := message.text.strip()):
        return
    
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –¢–í 2024", callback_data="tv_year_2024")],
        [InlineKeyboardButton(text="üì∫ –¢–í 2025", callback_data="tv_year_2025")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¢–í:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–°–≤–æ–¥–Ω–∞—è —Å–∞—É–Ω–¥–±–∞—Ä"
@router.message(F.text.func(lambda text: text and "—Å–≤–æ–¥–Ω–∞—è" in text.lower() and "—Å–∞—É–Ω–¥–±–∞—Ä" in text.lower()))
async def soundbar_summary_handler(
    message: Message, 
    db,
    config
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–°–≤–æ–¥–Ω–∞—è —Å–∞—É–Ω–¥–±–∞—Ä" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    if not message.text or not (text := message.text.strip()):
        return
    
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéµ –°–∞—É–Ω–¥–±–∞—Ä 2024", callback_data="soundbar_year_2024")],
        [InlineKeyboardButton(text="üéµ –°–∞—É–Ω–¥–±–∞—Ä 2025", callback_data="soundbar_year_2025")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∞—É–Ω–¥–±–∞—Ä–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–í–°–ö"
@router.message(F.text.func(lambda text: text and "–≤—Å–∫" in text.lower()))
async def vsk_handler(
    message: Message, 
    db,
    config
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–í–°–ö" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not message.text or not (text := message.text.strip()):
        return
    
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ü–∞–º—è—Ç–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –í–°–ö", callback_data="vsk_pamytka")],
        [InlineKeyboardButton(text="üìÑ –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º —Å–ª—É—á–∞–µ –í–°–ö", callback_data="vsk_zayavlenie")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –í–°–ö:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–°–≤–æ–¥–Ω–∞—è" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –¢–í –∏ —Å–∞—É–Ω–¥–±–∞—Ä–æ–º
@router.message(F.text.func(lambda text: text and "—Å–≤–æ–¥–Ω–∞—è" in text.lower() and "—Ç–≤" not in text.lower() and "—Å–∞—É–Ω–¥–±–∞—Ä" not in text.lower()))
async def summary_choice_handler(
    message: Message, 
    db,
    config
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "–°–≤–æ–¥–Ω–∞—è" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –¢–í –∏ —Å–∞—É–Ω–¥–±–∞—Ä–æ–º"""
    if not message.text or not (text := message.text.strip()):
        return
    
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Å–≤–æ–¥–Ω–æ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –°–≤–æ–¥–Ω–∞—è –¢–í", callback_data="summary_tv")],
        [InlineKeyboardButton(text="üéµ –°–≤–æ–¥–Ω–∞—è –°–∞—É–Ω–¥–±–∞—Ä", callback_data="summary_soundbar")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=keyboard)

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ª–æ–≤–∏—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.text)
async def message_handler(
    message: Message, 
    db,
    faq_loader,
    config
):
    if not message.text or not (text := message.text.strip()):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return
    
    if not message.from_user:
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    if user_id in waiting_for_password:
        if text == config.ACCESS_PASSWORD:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            waiting_for_password.discard(user_id)
            db.authenticate_user(message.from_user)
            await message.answer(
                "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FAQ-–±–æ—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n"
                "üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({message.from_user.first_name}) —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n"
                "üîí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {text}")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    if not check_authentication(message, db, config):
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if any(bad_word in text.lower() for bad_word in config.BLOCKED_WORDS):
        await message.answer("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞.")
        user_id = message.from_user.id if message.from_user else "unknown"
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        if message.from_user:
            db.log_bad_word(message.from_user, text)
        return

    # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ
    distances, indices = faq_loader.search(text, threshold=config.SIMILARITY_THRESHOLD)
    
    if not distances or not indices:
        logging.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{text}'")
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        db.log_query(text, success=False)
        db.log_unanswered_question(text)
        return

    similarity = distances[0]
    index = indices[0]
    match = faq_loader.faq[index]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    await message.answer(match['response'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã
    if 'resources' in match and match['resources']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        should_auto, single_resource = should_auto_send_resource(match['resources'])
        
        if should_auto and single_resource:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
            success = await auto_send_single_resource(message, single_resource)
            if not success:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = create_resource_selection_keyboard(match, index)
                await message.answer("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ—Å—É—Ä—Å:", reply_markup=keyboard)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
            keyboard = create_resource_selection_keyboard(match, index)
            await message.answer("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ—Å—É—Ä—Å:", reply_markup=keyboard)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    db.log_query(text, success=True)