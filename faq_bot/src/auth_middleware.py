from typing import Callable, Awaitable, Any, Dict
import logging

# Define BaseMiddleware class that works in all environments
class BaseMiddleware:
    """Base class for middleware"""
    async def __call__(
        self, 
        handler: Callable[[Any, Dict[str, Any]], Awaitable[Any]], 
        event: Any, 
        data: Dict[str, Any]
    ) -> Any:
        return await handler(event, data)

# Try to import aiogram classes
try:
    from aiogram.types import Message, CallbackQuery, TelegramObject
except ImportError:
    # Fallback classes for development environments
    class Message:
        def __init__(self):
            self.from_user = None
            self.text = ""
        
        async def answer(self, text, *args, **kwargs):
            pass
    
    class CallbackQuery:
        def __init__(self):
            self.from_user = None
            
        async def answer(self, text, show_alert=False, *args, **kwargs):
            pass
        
    class TelegramObject:
        pass

class AuthenticationMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_instance, config_instance):
        self.db = db_instance
        self.config = config_instance

    async def __call__(
        self,
        handler: Callable[[Any, Dict[str, Any]], Awaitable[Any]],
        event: Any,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        if isinstance(event, (Message, CallbackQuery)):
            user = event.from_user
        
        if not user:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if isinstance(event, Message) and event.text:
            # –†–∞–∑—Ä–µ—à–∞–µ–º /start –¥–ª—è –≤—Å–µ—Ö (–Ω—É–∂–Ω–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            if event.text.strip() == '/start':
                return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–∞–¥–º–∏–Ω –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        if user and user.id == self.config.ADMIN_ID:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º waiting_for_password –∏–∑ handlers
        try:
            from handlers import waiting_for_password
            if user and user.id in waiting_for_password:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return await handler(event, data)
        except ImportError:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if user and not self.db.is_user_authenticated(user.id):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            if isinstance(event, Message):
                await event.answer(
                    "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                    show_alert=True
                )
            
            logging.warning(f"–ù–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)